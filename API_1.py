from fastapi import FastAPI, Bodyimport jsonimport shapimport pandas as pdapp = FastAPI()# Charger le modèle picklewith open('banking_model.md, 'rb') as f:   model = pickle.load(f)# Chargement dataset  data_test = pd.read_csv("df_test_2.csv")# Définir la route pour la prédiction@app.get('/predict')def predict(id_client: dict = Body({})):    # Mise en serie des valeurs du client     df_id_client = pd.Series(json_id_client).to_frame().transpose()    # Effectuer la prédiction avec le modèle    prediction = model.predict_proba(df_id_client)[:, 1][0]    # Renvoyer la prédiction     return {'prediction': prediction}# Shap features@app.get ( '/shap')def shap(json_id_client: dict = Body({})):    # Mise en serie des valeurs du client     df_id_client = pd.Series(json_id_client).to_frame().transpose()    #Shap value features    explainer = shap.explainer(model)    shap_values = explainer.shap_values(df_id_client)    df_shap = pd.DataFrame({    'SHAP value': shap_values[1][0],        'feature': data_client_T.columns})    df_shap.sort_values(by = 'SHAP value', inplace = True, ascending = False)    return df_shap.to_json(orient = 'index')# Shap Score@app.get ( '/shap_score')def shap_score():   # Mise en serie des valeurs du client    df_id_client = pd.Series(json_id_client).to_frame().transpose()    # shap value client    explainer = shap.explainer(model)    score = explainer.model.predict(data_client)    return {'shap_score': score}